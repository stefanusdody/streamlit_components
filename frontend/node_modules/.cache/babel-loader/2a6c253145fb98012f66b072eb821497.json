{"ast":null,"code":"var _jsxFileName = \"/Users/dody/Desktop/component_st/my_component/frontend/src/MyComponent.tsx\";\nimport { Streamlit, StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\nimport React from \"react\";\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass MyComponent extends StreamlitComponentBase {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      numClicks: 0,\n      isFocused: false\n    };\n\n    this.render = () => {\n      // Arguments that are passed to the plugin in Python are accessible\n      // via `this.props.args`. Here, we access the \"name\" arg.\n      const name = this.props.args[\"name\"];\n      const greeting = this.props.args[\"greeting\"]; // Streamlit sends us a theme object via props that we can use to ensure\n      // that our component has visuals that match the active theme in a\n      // streamlit app.\n\n      const {\n        theme\n      } = this.props;\n      const style = {}; // Maintain compatibility with older versions of Streamlit that don't send\n      // a theme object.\n\n      if (theme) {\n        // Use the theme object to style our button border. Alternatively, the\n        // theme style is defined in CSS vars.\n        const borderStyling = `1px solid ${this.state.isFocused ? theme.primaryColor : \"gray\"}`;\n        style.border = borderStyling;\n        style.outline = borderStyling;\n      } // Show a button and some text.\n      // When the button is clicked, we'll increment our \"numClicks\" state\n      // variable, and send its new value back to Streamlit, where it'll\n      // be available to the Python program.\n\n\n      return /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 7\n        }\n      }, greeting, \", \", name, \"! \\xA0\", /*#__PURE__*/React.createElement(\"button\", {\n        style: style,\n        onClick: this.onClicked,\n        disabled: this.props.disabled,\n        onFocus: this._onFocus,\n        onBlur: this._onBlur,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 9\n        }\n      }, \"Click Me!\"));\n    };\n\n    this.onClicked = () => {\n      Streamlit.setComponentValue(\"I am a return value\");\n    };\n\n    this._onFocus = () => {\n      this.setState({\n        isFocused: true\n      });\n    };\n\n    this._onBlur = () => {\n      this.setState({\n        isFocused: false\n      });\n    };\n  }\n\n} // \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\n\n\nexport default withStreamlitConnection(MyComponent);","map":{"version":3,"sources":["/Users/dody/Desktop/component_st/my_component/frontend/src/MyComponent.tsx"],"names":["Streamlit","StreamlitComponentBase","withStreamlitConnection","React","MyComponent","state","numClicks","isFocused","render","name","props","args","greeting","theme","style","borderStyling","primaryColor","border","outline","onClicked","disabled","_onFocus","_onBlur","setComponentValue","setState"],"mappings":";AAAA,SACEA,SADF,EAEEC,sBAFF,EAGEC,uBAHF,QAIO,yBAJP;AAKA,OAAOC,KAAP,MAAiC,OAAjC;;AAOA;AACA;AACA;AACA;AACA,MAAMC,WAAN,SAA0BH,sBAA1B,CAAwD;AAAA;AAAA;AAAA,SAC/CI,KAD+C,GACvC;AAAEC,MAAAA,SAAS,EAAE,CAAb;AAAgBC,MAAAA,SAAS,EAAE;AAA3B,KADuC;;AAAA,SAG/CC,MAH+C,GAGtC,MAAiB;AAC/B;AACA;AACA,YAAMC,IAAI,GAAG,KAAKC,KAAL,CAAWC,IAAX,CAAgB,MAAhB,CAAb;AACA,YAAMC,QAAQ,GAAG,KAAKF,KAAL,CAAWC,IAAX,CAAgB,UAAhB,CAAjB,CAJ+B,CAM/B;AACA;AACA;;AACA,YAAM;AAAEE,QAAAA;AAAF,UAAY,KAAKH,KAAvB;AACA,YAAMI,KAA0B,GAAG,EAAnC,CAV+B,CAY/B;AACA;;AACA,UAAID,KAAJ,EAAW;AACT;AACA;AACA,cAAME,aAAa,GAAI,aACrB,KAAKV,KAAL,CAAWE,SAAX,GAAuBM,KAAK,CAACG,YAA7B,GAA4C,MAC7C,EAFD;AAGAF,QAAAA,KAAK,CAACG,MAAN,GAAeF,aAAf;AACAD,QAAAA,KAAK,CAACI,OAAN,GAAgBH,aAAhB;AACD,OAtB8B,CAwB/B;AACA;AACA;AACA;;;AACA,0BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGH,QADH,QACeH,IADf,yBAEE;AACE,QAAA,KAAK,EAAEK,KADT;AAEE,QAAA,OAAO,EAAE,KAAKK,SAFhB;AAGE,QAAA,QAAQ,EAAE,KAAKT,KAAL,CAAWU,QAHvB;AAIE,QAAA,OAAO,EAAE,KAAKC,QAJhB;AAKE,QAAA,MAAM,EAAE,KAAKC,OALf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAFF,CADF;AAcD,KA7CqD;;AAAA,SAgD9CH,SAhD8C,GAgDlC,MAAY;AAC9BnB,MAAAA,SAAS,CAACuB,iBAAV,CAA4B,qBAA5B;AACD,KAlDqD;;AAAA,SAqD9CF,QArD8C,GAqDnC,MAAY;AAC7B,WAAKG,QAAL,CAAc;AAAEjB,QAAAA,SAAS,EAAE;AAAb,OAAd;AACD,KAvDqD;;AAAA,SA0D9Ce,OA1D8C,GA0DpC,MAAY;AAC5B,WAAKE,QAAL,CAAc;AAAEjB,QAAAA,SAAS,EAAE;AAAb,OAAd;AACD,KA5DqD;AAAA;;AAAA,C,CA+DxD;AACA;AACA;AACA;AACA;;;AACA,eAAeL,uBAAuB,CAACE,WAAD,CAAtC","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\n\ninterface State {\n  numClicks: number\n  isFocused: boolean\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass MyComponent extends StreamlitComponentBase<State> {\n  public state = { numClicks: 0, isFocused: false }\n\n  public render = (): ReactNode => {\n    // Arguments that are passed to the plugin in Python are accessible\n    // via `this.props.args`. Here, we access the \"name\" arg.\n    const name = this.props.args[\"name\"]\n    const greeting = this.props.args[\"greeting\"]\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n\n    // Maintain compatibility with older versions of Streamlit that don't send\n    // a theme object.\n    if (theme) {\n      // Use the theme object to style our button border. Alternatively, the\n      // theme style is defined in CSS vars.\n      const borderStyling = `1px solid ${\n        this.state.isFocused ? theme.primaryColor : \"gray\"\n      }`\n      style.border = borderStyling\n      style.outline = borderStyling\n    }\n\n    // Show a button and some text.\n    // When the button is clicked, we'll increment our \"numClicks\" state\n    // variable, and send its new value back to Streamlit, where it'll\n    // be available to the Python program.\n    return (\n      <span>\n        {greeting}, {name}! &nbsp;\n        <button\n          style={style}\n          onClick={this.onClicked}\n          disabled={this.props.disabled}\n          onFocus={this._onFocus}\n          onBlur={this._onBlur}\n        >\n          Click Me!\n        </button>\n      </span>\n    )\n  }\n\n  /** Click handler for our \"Click Me!\" button. */\n  private onClicked = (): void => {\n    Streamlit.setComponentValue(\"I am a return value\")\n  }\n\n  /** Focus handler for our \"Click Me!\" button. */\n  private _onFocus = (): void => {\n    this.setState({ isFocused: true })\n  }\n\n  /** Blur handler for our \"Click Me!\" button. */\n  private _onBlur = (): void => {\n    this.setState({ isFocused: false })\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(MyComponent)\n"]},"metadata":{},"sourceType":"module"}